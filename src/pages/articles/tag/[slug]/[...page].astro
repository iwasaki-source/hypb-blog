---
import Layout from "@/layouts/layout";
import Container from "@/components/container.astro";
import ArticleContainer from "@/components/pages/article/article-container.astro";
import Sidebar from "@/components/sidebar.astro";

import { getCollection } from "astro:content";
import { compareDesc } from 'date-fns';
import ArticleList from "@/components/pages/article/article-list.astro";
import Card from "@/components/card.astro";
import ListTitle from "@/components/pages/list-title.astro";
import { tags } from "@/lib/constants";

import type { CollectionEntry } from "astro:content";
import type { Page, PaginateFunction } from "astro";

interface Props {
  page: Page<CollectionEntry<"articles">>;
  name: string;
}

export async function getStaticPaths({
  paginate
} : {
  paginate: PaginateFunction
}) {
  const articlePosts = await getCollection('articles');
  const nonDraftPosts = articlePosts.filter((post) => !post.data.draft);
  const sortedArticlePosts = nonDraftPosts.sort((a, b) => compareDesc(a.data.pubDate, b.data.pubDate));
  return tags.flatMap((tag) => {
    const { name, slug } = tag;
    const filteredPosts = sortedArticlePosts.filter((post) => {
      return post.data.tags.includes(name);
    });
    return paginate(filteredPosts, {
      params: { slug },
      props: { name },
    })
  })
}
const {
  page: {
    data,
  },
  name } = Astro.props;
const tagsNum = data.length
---

<Layout pageTitle={name} description={`${name}の記事一覧`}>
  <Container maxWidth="1280px">
    <ListTitle title={name} num={tagsNum} />
    <ArticleContainer>
      <Sidebar />
      <ArticleList>
      {
        data.map((post) => {
          const { slug, data: { image, title, pubDate, category, tags }} = post;
          return (
            <Card url={`/articles/${slug}`} src={image} title={title} time={pubDate} category={category} tags={tags} />
          )
        })
      }
      </ArticleList>
    </ArticleContainer>
  </Container>
</Layout>
